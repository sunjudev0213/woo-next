{"ast":null,"code":"/**\n * Extracts and returns float value from a string.\n *\n * @param {string} string String\n * @return {any}\n */\nexport const getFloatVal = string => {\n  let floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\n\nexport const addFirstProduct = product => {\n  let productPrice = getFloatVal(product.price);\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('woo-next-cart', JSON.stringify(newCart));\n  return newCart;\n};\n/**\n * Create a new product object.\n *\n * @param {Object} product Product\n * @param {Integer} productPrice Product Price\n * @param {Integer} qty Quantity\n * @return {{image: *, productId: *, totalPrice: number, price: *, qty: *, name: *}}\n */\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productId: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\n/**\n * Updates the existing cart with new item.\n *\n * @param {Object} existingCart Existing Cart.\n * @param {Object} product Product.\n * @param {Integer} qtyToBeAdded Quantity.\n * @param {Integer} newQty New Qty to be updated.\n * @return {{totalProductsCount: *, totalProductsPrice: *, products: *}}\n */\n\nexport const updateCart = (existingCart, product, qtyToBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtyToBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; // Loop through the updated product array and add the totalPrice of each item to get the totalPrice\n\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseFloat(total.totalPrice)\n  };\n  localStorage.setItem('woo-next-cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};\n/**\n * Get updated products array\n * Update the product if it exists else,\n * add the new product to existing cart,\n *\n * @param {Object} existingProductsInCart Existing product in cart\n * @param {Object} product Product\n * @param {Integer} qtyToBeAdded Quantity\n * @param {Integer} newQty New qty of the product (optional)\n * @return {*[]}\n */\n\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\n  // Check if the product already exits in the cart.\n  const productExitsIndex = isProductInCart(existingProductsInCart, product.productId); // If product exits ( index of that product found in the array ), update the product quantity and totalPrice\n\n  if (-1 < productExitsIndex) {\n    let updatedProducts = existingProductsInCart;\n    let updatedProduct = updatedProducts[productExitsIndex]; // If have new qty of the product available, set that else add the qtyToBeAdded\n\n    updatedProduct.qty = newQty ? parseInt(newQty) : parseInt(updatedProduct.qty + qtyToBeAdded);\n    updatedProduct.totalPrice = parseFloat((updatedProduct.price * updatedProduct.qty).toFixed(2));\n    return updatedProducts;\n  } else {\n    // If product not found push the new product to the existing product array.\n    let productPrice = getFloatVal(product.price);\n    const newProduct = createNewProduct(product, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n};\n/**\n * Returns index of the product if it exists.\n *\n * @param {Object} existingProductsInCart Existing Products.\n * @param {Integer} productId Product id.\n * @return {number | *} Index Returns -1 if product does not exist in the array, index number otherwise\n */\n\nconst isProductInCart = (existingProductsInCart, productId) => {\n  const returnItemThatExits = (item, index) => {\n    if (productId === item.productId) {\n      return item;\n    }\n  }; // This new array will only contain the product which is matched.\n\n\n  const newArray = existingProductsInCart.filter(returnItemThatExits);\n  return existingProductsInCart.indexOf(newArray[0]);\n};\n/**\n * Remove Item from the cart.\n *\n * @param {Integer} productId Product Id.\n * @return {any | string} Updated cart\n */\n\n\nexport const removeItemFromCart = productId => {\n  let existingCart = localStorage.getItem('woo-next-cart');\n  existingCart = JSON.parse(existingCart); // If there is only one item in the cart, delete the cart.\n\n  if (1 === existingCart.products.length) {\n    localStorage.removeItem('woo-next-cart');\n    return null;\n  } // Check if the product already exits in the cart.\n\n\n  const productExitsIndex = isProductInCart(existingCart.products, productId); // If product to be removed exits\n\n  if (-1 < productExitsIndex) {\n    const productTobeRemoved = existingCart.products[productExitsIndex];\n    const qtyToBeRemovedFromTotal = productTobeRemoved.qty;\n    const priceToBeDeductedFromTotal = productTobeRemoved.totalPrice; // Remove that product from the array and update the total price and total quantity of the cart\n\n    let updatedCart = existingCart;\n    updatedCart.products.splice(productExitsIndex, 1);\n    updatedCart.totalProductsCount = updatedCart.totalProductsCount - qtyToBeRemovedFromTotal;\n    updatedCart.totalProductsPrice = updatedCart.totalProductsPrice - priceToBeDeductedFromTotal;\n    localStorage.setItem('woo-next-cart', JSON.stringify(updatedCart));\n    return updatedCart;\n  } else {\n    return existingCart;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}